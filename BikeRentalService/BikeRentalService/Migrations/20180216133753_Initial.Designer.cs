// <auto-generated />
using BikeRentalService.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BikeRentalService.Migrations
{
    [DbContext(typeof(BikeRentalContext))]
    [Migration("20180216133753_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BikeRentalService.Models.Bike", b =>
                {
                    b.Property<int>("BikeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("CategoryId");

                    b.Property<DateTime>("DateOfLastService");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<double>("RentalPriceExtraHour");

                    b.Property<double>("RentalPriceFirstHour");

                    b.HasKey("BikeId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Bikes");
                });

            modelBuilder.Entity("BikeRentalService.Models.BikeCategory", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName")
                        .IsRequired();

                    b.HasKey("CategoryId");

                    b.ToTable("BikeCategorys");
                });

            modelBuilder.Entity("BikeRentalService.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Birthday");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("GenderId");

                    b.Property<int>("HouseNumber");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<string>("Town")
                        .IsRequired()
                        .HasMaxLength(75);

                    b.Property<int>("ZipCode");

                    b.HasKey("CustomerId");

                    b.HasIndex("GenderId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("BikeRentalService.Models.PersonGender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GenderName")
                        .IsRequired();

                    b.HasKey("GenderId");

                    b.ToTable("PersonGenders");
                });

            modelBuilder.Entity("BikeRentalService.Models.Rental", b =>
                {
                    b.Property<int>("RentalId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BuyerCustomerId");

                    b.Property<bool>("PaidFlag");

                    b.Property<DateTime>("RentEndTime");

                    b.Property<DateTime>("RentStartTime");

                    b.Property<int>("RentedBikeBikeId");

                    b.Property<double>("TotalCost");

                    b.HasKey("RentalId");

                    b.HasIndex("BuyerCustomerId");

                    b.HasIndex("RentedBikeBikeId");

                    b.ToTable("Rentals");
                });

            modelBuilder.Entity("BikeRentalService.Models.Bike", b =>
                {
                    b.HasOne("BikeRentalService.Models.BikeCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("BikeRentalService.Models.Customer", b =>
                {
                    b.HasOne("BikeRentalService.Models.PersonGender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId");
                });

            modelBuilder.Entity("BikeRentalService.Models.Rental", b =>
                {
                    b.HasOne("BikeRentalService.Models.Customer", "Buyer")
                        .WithMany()
                        .HasForeignKey("BuyerCustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BikeRentalService.Models.Bike", "RentedBike")
                        .WithMany()
                        .HasForeignKey("RentedBikeBikeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
